"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOnLoadMore = void 0;
var useConstCallback_1 = require("./useConstCallback");
var evt_1 = require("evt");
var useDomRect_1 = require("./useDomRect");
var useEvt_1 = require("evt/hooks/useEvt");
var useConst_1 = require("./useConst");
var getScrollableParent_1 = require("./getScrollableParent");
var assert_1 = require("tsafe/assert");
var is_1 = require("tsafe/is");
function useOnLoadMore(props) {
    var loadingDivRef = props.loadingDivRef, onLoadMore = props.onLoadMore;
    (0, assert_1.assert)((0, is_1.is)(loadingDivRef));
    var loadingDivHeight = (0, useDomRect_1.useDomRect)({ "ref": loadingDivRef }).domRect.height;
    var onLoadMoreOnce = (function useClosure() {
        var onLoadMoreConst = (0, useConstCallback_1.useConstCallback)(onLoadMore);
        var onLoadMoreOnce = (0, useConst_1.useConst)(function () {
            var lastScrollHeight = undefined;
            function onLoadMoreOnce(scrollHeight) {
                if (lastScrollHeight === scrollHeight) {
                    return;
                }
                lastScrollHeight = scrollHeight;
                onLoadMoreConst();
            }
            return { onLoadMoreOnce: onLoadMoreOnce };
        }).onLoadMoreOnce;
        return { onLoadMoreOnce: onLoadMoreOnce };
    })().onLoadMoreOnce;
    (0, useEvt_1.useEvt)(function (ctx) {
        if (loadingDivHeight === 0) {
            return;
        }
        var loadingDivElement = loadingDivRef.current;
        //NOTE: If the loadingDivHeight is not 0, loadingDiv has rendered.
        (0, assert_1.assert)(loadingDivElement !== null);
        var scrollElement = (0, getScrollableParent_1.getScrollableParent)({
            "element": loadingDivElement,
            "doReturnElementIfScrollable": false
        });
        evt_1.Evt.from(ctx, scrollElement, "scroll")
            .toStateful()
            .attach(function () {
            var scrollTop = scrollElement.scrollTop, clientHeight = scrollElement.clientHeight, scrollHeight = scrollElement.scrollHeight;
            var rest = scrollHeight - (scrollTop + clientHeight);
            if (rest < loadingDivHeight) {
                onLoadMoreOnce(scrollHeight);
            }
        });
    }, [loadingDivHeight, loadingDivRef]);
}
exports.useOnLoadMore = useOnLoadMore;
//# sourceMappingURL=useOnLoadMore.js.map