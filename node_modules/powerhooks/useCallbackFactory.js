"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCallbackFactory = void 0;
var react_1 = require("react");
var memoizee_1 = __importDefault(require("memoizee"));
var id_1 = require("tsafe/id");
/**
 * https://docs.powerhooks.dev/api-reference/usecallbackfactory
 *
 *  const callbackFactory= useCallbackFactory(
 *      ([key]: [string], [params]: [{ foo: number; }]) => {
 *          ...
 *      },
 *      []
 *  );
 *
 * WARNING: Factory args should not be of variable length.
 *
 */
function useCallbackFactory(callback) {
    var callbackRef = (0, react_1.useRef)(callback);
    callbackRef.current = callback;
    var memoizedRef = (0, react_1.useRef)(undefined);
    return (0, react_1.useState)(function () { return (0, id_1.id)(function () {
        var factoryArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            factoryArgs[_i] = arguments[_i];
        }
        if (memoizedRef.current === undefined) {
            memoizedRef.current = (0, memoizee_1.default)(function () {
                var factoryArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    factoryArgs[_i] = arguments[_i];
                }
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return callbackRef.current(factoryArgs, args);
                };
            }, { "length": factoryArgs.length });
        }
        return memoizedRef.current.apply(memoizedRef, __spreadArray([], __read(factoryArgs), false));
    }); })[0];
}
exports.useCallbackFactory = useCallbackFactory;
//# sourceMappingURL=useCallbackFactory.js.map