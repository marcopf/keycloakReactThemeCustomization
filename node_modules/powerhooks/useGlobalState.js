"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUseGlobalState = exports.injectGlobalStatesInSearchParams = exports.globalStates = void 0;
var react_1 = require("react");
var useConstCallback_1 = require("./useConstCallback");
var overwriteReadonlyProp_1 = require("tsafe/lab/overwriteReadonlyProp");
var typeGuard_1 = require("tsafe/typeGuard");
var capitalize_1 = require("./tools/capitalize");
var memoize0_1 = require("./tools/memoize0");
var urlSearchParams_1 = require("./tools/urlSearchParams");
var StatefulObservable_1 = require("./tools/StatefulObservable");
var _a = (function () {
    var propertyKey = "__powerhooks_useGlobalState_context";
    var peerDepObj = react_1.createContext;
    var sharedContext = peerDepObj.__powerhooks_useGlobalState_context;
    if (sharedContext === undefined) {
        sharedContext = {
            "globalStates": {},
            "persistedGlobalStateNames": new Set()
        };
        Object.defineProperty(peerDepObj, propertyKey, {
            "configurable": false,
            "enumerable": false,
            "writable": false,
            "value": sharedContext
        });
    }
    return sharedContext;
})(), globalStates = _a.globalStates, persistedGlobalStateNames = _a.persistedGlobalStateNames;
exports.globalStates = globalStates;
function stringify(obj) {
    return JSON.stringify([obj]);
}
function parse(str) {
    return JSON.parse(str)[0];
}
var prefix = "powerhooks_useGlobalState_";
var _b = (function () {
    /** Returns the modified url */
    function injectGlobalStatesInSearchParams(url) {
        var newUrl = url;
        Object.keys(globalStates)
            .filter(function (name) { return persistedGlobalStateNames.has(name); })
            .forEach(function (name) {
            return newUrl =
                (0, urlSearchParams_1.addParamToUrl)({
                    "url": newUrl,
                    "name": "".concat(prefix).concat(name),
                    "value": stringify(globalStates[name])
                })
                    .newUrl;
        });
        return newUrl;
    }
    var getUnparsedStatesFromUrlSearchParams = (0, memoize0_1.memoize0)(function () {
        var _a = (0, urlSearchParams_1.retrieveAllParamStartingWithPrefixFromUrl)({
            "url": window.location.href,
            prefix: prefix,
            "doLeavePrefixInResults": false
        }), newUrl = _a.newUrl, unparsedStates = _a.values;
        //NOTE: We use a timeout in case there is multiple instances of 
        // powerhooks.
        setTimeout(function () {
            (0, urlSearchParams_1.updateSearchBarUrl)(newUrl);
        }, 0);
        return { unparsedStates: unparsedStates };
    });
    function getStatesFromUrlSearchParams(params) {
        var name = params.name;
        var unparsedStates = getUnparsedStatesFromUrlSearchParams().unparsedStates;
        if (!(name in unparsedStates)) {
            return { "wasPresent": false };
        }
        return {
            "wasPresent": true,
            "state": parse(unparsedStates[name])
        };
    }
    return {
        injectGlobalStatesInSearchParams: injectGlobalStatesInSearchParams,
        getStatesFromUrlSearchParams: getStatesFromUrlSearchParams
    };
})(), injectGlobalStatesInSearchParams = _b.injectGlobalStatesInSearchParams, getStatesFromUrlSearchParams = _b.getStatesFromUrlSearchParams;
exports.injectGlobalStatesInSearchParams = injectGlobalStatesInSearchParams;
/**
 *
 * Assert: If localStorageKey is not disabled, T must be
 * serializable with JSON.stringify.
 *
 * const { useFoo } = createUseGlobalState2({
 *     "getDefaultState": ()=> 33,
 *     "name": "foo"
 * });
 *
 * const { foo, setFoo  } = useFoo();
 *
 * By default persistance is enabled using localStorage.
 *
 */
function createUseGlobalState(params) {
    var _a;
    var name = params.name, initialState = params.initialState, doPersistAcrossReloads = params.doPersistAcrossReloads;
    if (doPersistAcrossReloads) {
        persistedGlobalStateNames.add(name);
    }
    //NOTE: We want to clean the url asap so we don't put it in the 
    // evt getter... 
    var urlSearchParam = getStatesFromUrlSearchParams({ name: name });
    var get$xyz = (0, memoize0_1.memoize0)(function () {
        var localStorageKey = "".concat(prefix).concat(name);
        var storeStateInPersistentStorage = !doPersistAcrossReloads ? undefined : function (state) { return localStorage.setItem(localStorageKey, stringify(state)); };
        var $xyz = (0, StatefulObservable_1.createStatefulObservable)((function () {
            var initialValue = (function () {
                if (urlSearchParam.wasPresent) {
                    var state = urlSearchParam.state;
                    storeStateInPersistentStorage === null || storeStateInPersistentStorage === void 0 ? void 0 : storeStateInPersistentStorage(state);
                    return state;
                }
                if (doPersistAcrossReloads) {
                    var serializedState = localStorage.getItem(localStorageKey);
                    if (serializedState !== null) {
                        return parse(serializedState);
                    }
                }
                return (0, typeGuard_1.typeGuard)(initialState, typeof initialState === "function") ?
                    initialState() :
                    initialState;
            })();
            return function () { return initialValue; };
        })());
        if (storeStateInPersistentStorage !== undefined) {
            $xyz.subscribe(storeStateInPersistentStorage);
        }
        return $xyz;
    });
    Object.defineProperty(globalStates, name, {
        "enumerable": true,
        "get": function () { return get$xyz().current; }
    });
    function useXyz() {
        var _a;
        var $xyz = get$xyz();
        (0, StatefulObservable_1.useRerenderOnChange)($xyz);
        return _a = {},
            _a[name] = $xyz.current,
            _a["set".concat((0, capitalize_1.capitalize)(name))] = (0, useConstCallback_1.useConstCallback)(function (setStateAction) {
                return $xyz.current =
                    (0, typeGuard_1.typeGuard)(setStateAction, typeof setStateAction === "function") ?
                        setStateAction($xyz.current) :
                        setStateAction;
            }),
            _a;
    }
    (0, overwriteReadonlyProp_1.overwriteReadonlyProp)(useXyz, "name", "use".concat((0, capitalize_1.capitalize)(name)));
    return Object.defineProperty((_a = {}, _a[useXyz.name] = useXyz, _a), "$".concat(name), {
        "enumerable": true,
        "get": function () { return get$xyz(); }
    });
}
exports.createUseGlobalState = createUseGlobalState;
//# sourceMappingURL=useGlobalState.js.map