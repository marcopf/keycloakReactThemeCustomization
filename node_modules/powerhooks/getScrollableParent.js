"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScrollableParent = void 0;
var assert_1 = require("tsafe/assert");
//NOTE: If the element is scrollable, it returns the element itself.
function getScrollableParent(params) {
    var element = params.element, doReturnElementIfScrollable = params.doReturnElementIfScrollable;
    if (element === document.documentElement) {
        var element_1 = {
            "addEventListener": function (type, listener) { return window.addEventListener(type, listener); },
            "removeEventListener": function (type, listener) { return window.removeEventListener(type, listener); },
            "getBoundingClientRect": function () { return document.documentElement.getBoundingClientRect(); },
            "scrollTop": NaN,
            "clientHeight": NaN,
            "scrollHeight": NaN,
            "scrollTo": window.scrollTo.bind(window),
            "style": document.body.style,
            "isWindow": true,
        };
        Object.defineProperties(element_1, {
            "scrollTop": {
                "get": function () { return window.scrollY; }
            },
            "clientHeight": {
                "get": function () { return document.documentElement.clientHeight; }
            },
            "scrollHeight": {
                "get": function () { return document.documentElement.scrollHeight; }
            }
        });
        return element_1;
    }
    if (doReturnElementIfScrollable && getIsElementScrollable(element)) {
        return element;
    }
    var parentElement = element.parentElement;
    (0, assert_1.assert)(parentElement !== null);
    return getScrollableParent({
        "element": parentElement,
        "doReturnElementIfScrollable": true
    });
}
exports.getScrollableParent = getScrollableParent;
function getIsElementScrollable(element) {
    return ["auto", "scroll"].includes(getComputedStyle(element).overflow);
}
//# sourceMappingURL=getScrollableParent.js.map