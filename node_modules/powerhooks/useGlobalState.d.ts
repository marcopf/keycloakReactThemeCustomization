import type { UseNamedStateReturnType } from "./useNamedState";
import type { StatefulObservable } from "./tools/StatefulObservable";
export type { StatefulObservable };
declare const globalStates: Readonly<Record<string, unknown>>;
export { globalStates };
declare const injectGlobalStatesInSearchParams: (url: string) => string;
export { injectGlobalStatesInSearchParams };
/**
 *
 * Assert: If localStorageKey is not disabled, T must be
 * serializable with JSON.stringify.
 *
 * const { useFoo } = createUseGlobalState2({
 *     "getDefaultState": ()=> 33,
 *     "name": "foo"
 * });
 *
 * const { foo, setFoo  } = useFoo();
 *
 * By default persistance is enabled using localStorage.
 *
 */
export declare function createUseGlobalState<T, Name extends string>(params: {
    name: Name;
    /** If function called only if not in local storage */
    initialState: T | (() => T);
    doPersistAcrossReloads: boolean;
}): Record<`use${Capitalize<Name>}`, () => UseNamedStateReturnType<T, Name>> & Record<`$${Name}`, StatefulObservable<T>>;
