/// <reference types="node" />
/// <reference types="node" />
import type { UseNamedStateReturnType } from "./useNamedState";
import type { AppContext } from "next/app";
import DefaultApp from "next/app";
import type { NextComponentType } from "next";
import type { IncomingHttpHeaders } from "http";
import type { FC } from "react";
import type { MaybePromise } from "./tools/MaybePromise";
import type { ParsedUrlQuery } from "querystring";
import type { StatefulObservable } from "./tools/StatefulObservable";
export type { StatefulObservable };
export declare function createUseSsrGlobalState<T, Name extends string>(params: {
    name: Name;
    /** If present and it doesn't return undefined it will override the current state and will take precedence over getInitialStateServerSide if no cookie was present */
    getStateSeverSide?: (appContext: AppContext) => MaybePromise<{
        value: T;
    } | undefined>;
    getInitialStateServerSide: (appContext: AppContext) => MaybePromise<{
        initialValue: T;
        doFallbackToGetInitialValueClientSide?: boolean;
    }>;
    getInitialStateClientSide?: () => MaybePromise<T>;
    Head?: (props: Record<Name, T> & {
        headers: IncomingHttpHeaders;
        query: ParsedUrlQuery;
        pathname: string;
    }) => ReturnType<FC>;
}): Record<`use${Capitalize<Name>}`, () => UseNamedStateReturnType<T, Name>> & Record<`$${Name}`, StatefulObservable<T>> & Record<`with${Capitalize<Name>}`, {
    <AppComponent extends NextComponentType<any, any, any>>(App: AppComponent): AppComponent;
    (): typeof DefaultApp;
}>;
