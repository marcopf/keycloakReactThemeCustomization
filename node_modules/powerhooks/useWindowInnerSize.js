"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWindowInnerSize = void 0;
var react_1 = require("react");
var evt_1 = require("evt");
var useEvt_1 = require("evt/hooks/useEvt");
var isBrowser_1 = require("./tools/isBrowser");
var assert_1 = require("tsafe/assert");
var symToStr_1 = require("tsafe/symToStr");
var same_1 = require("evt/tools/inDepth/same");
function useWindowInnerSize(
/** Default: { isSsrSetup: false }, We assume we are in a SPA */
params) {
    var _a = (params !== null && params !== void 0 ? params : {}).isSsrSetup, isSsrSetup = _a === void 0 ? false : _a;
    var _b = __read((0, react_1.useState)(function () {
        return isSsrSetup ?
            {
                "windowInnerWidth": undefined,
                "windowInnerHeight": undefined
            } :
            ((0, assert_1.assert)(isBrowser_1.isBrowser, "".concat((0, symToStr_1.symToStr)({ useWindowInnerSize: useWindowInnerSize }), " should be used in SSR mode")), {
                "windowInnerWidth": window.innerWidth,
                "windowInnerHeight": window.innerHeight
            });
    }), 2), dimensions = _b[0], setDimensions = _b[1];
    (0, useEvt_1.useEvt)(function (ctx) {
        return evt_1.Evt.from(ctx, window, "resize")
            .attach(function () {
            var dimensions = {
                "windowInnerWidth": window.innerWidth,
                "windowInnerHeight": window.innerHeight
            };
            setDimensions(function (currentDimensions) { return (0, same_1.same)(currentDimensions, dimensions) ? currentDimensions : dimensions; });
        });
    }, []);
    //@ts-expect-error
    return dimensions;
}
exports.useWindowInnerSize = useWindowInnerSize;
//# sourceMappingURL=useWindowInnerSize.js.map