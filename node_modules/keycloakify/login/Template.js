import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { assert } from "../tools/assert";
import { clsx } from "../tools/clsx";
import { usePrepareTemplate } from "../lib/usePrepareTemplate";
import { useGetClassName } from "../login/lib/useGetClassName";
export default function Template(props) {
    const { displayInfo = false, displayMessage = true, displayRequiredFields = false, displayWide = false, showAnotherWayIfPresent = true, headerNode, showUsernameNode = null, infoNode = null, kcContext, i18n, doUseDefaultCss, classes, children } = props;
    const { getClassName } = useGetClassName({ doUseDefaultCss, classes });
    const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n;
    const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext;
    const { isReady } = usePrepareTemplate({
        "doFetchDefaultThemeResources": doUseDefaultCss,
        "styles": [
            `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly.min.css`,
            `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly-additions.min.css`,
            `${url.resourcesCommonPath}/lib/zocial/zocial.css`,
            `${url.resourcesPath}/css/login.css`
        ],
        "htmlClassName": getClassName("kcHtmlClass"),
        "bodyClassName": getClassName("kcBodyClass")
    });
    if (!isReady) {
        return null;
    }
    document.title = i18n.msgStr("loginTitle", kcContext.realm.displayName);
    return (_jsxs("div", Object.assign({ className: getClassName("kcLoginClass") }, { children: [_jsx("div", Object.assign({ id: "kc-header", className: getClassName("kcHeaderClass") }, { children: _jsx("div", Object.assign({ id: "kc-header-wrapper", className: getClassName("kcHeaderWrapperClass") }, { children: msg("loginTitleHtml", realm.displayNameHtml) })) })), _jsxs("div", Object.assign({ className: clsx(getClassName("kcFormCardClass"), displayWide && getClassName("kcFormCardAccountClass")) }, { children: [_jsxs("header", Object.assign({ className: getClassName("kcFormHeaderClass") }, { children: [realm.internationalizationEnabled && (assert(locale !== undefined), true) && locale.supported.length > 1 && (_jsx("div", Object.assign({ id: "kc-locale" }, { children: _jsx("div", Object.assign({ id: "kc-locale-wrapper", className: getClassName("kcLocaleWrapperClass") }, { children: _jsxs("div", Object.assign({ className: "kc-dropdown", id: "kc-locale-dropdown" }, { children: [_jsx("a", Object.assign({ href: "#", id: "kc-current-locale-link" }, { children: labelBySupportedLanguageTag[currentLanguageTag] })), _jsx("ul", { children: locale.supported.map(({ languageTag }) => (_jsx("li", Object.assign({ className: "kc-dropdown-item" }, { children: _jsx("a", Object.assign({ href: "#", onClick: () => changeLocale(languageTag) }, { children: labelBySupportedLanguageTag[languageTag] })) }), languageTag))) })] })) })) }))), !(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (displayRequiredFields ? (_jsxs("div", Object.assign({ className: getClassName("kcContentWrapperClass") }, { children: [_jsx("div", Object.assign({ className: clsx(getClassName("kcLabelWrapperClass"), "subtitle") }, { children: _jsxs("span", Object.assign({ className: "subtitle" }, { children: [_jsx("span", Object.assign({ className: "required" }, { children: "*" })), msg("requiredFields")] })) })), _jsx("div", Object.assign({ className: "col-md-10" }, { children: _jsx("h1", Object.assign({ id: "kc-page-title" }, { children: headerNode })) }))] }))) : (_jsx("h1", Object.assign({ id: "kc-page-title" }, { children: headerNode })))) : displayRequiredFields ? (_jsxs("div", Object.assign({ className: getClassName("kcContentWrapperClass") }, { children: [_jsx("div", Object.assign({ className: clsx(getClassName("kcLabelWrapperClass"), "subtitle") }, { children: _jsxs("span", Object.assign({ className: "subtitle" }, { children: [_jsx("span", Object.assign({ className: "required" }, { children: "*" })), " ", msg("requiredFields")] })) })), _jsxs("div", Object.assign({ className: "col-md-10" }, { children: [showUsernameNode, _jsx("div", Object.assign({ className: getClassName("kcFormGroupClass") }, { children: _jsxs("div", Object.assign({ id: "kc-username" }, { children: [_jsx("label", Object.assign({ id: "kc-attempted-username" }, { children: auth === null || auth === void 0 ? void 0 : auth.attemptedUsername })), _jsx("a", Object.assign({ id: "reset-login", href: url.loginRestartFlowUrl }, { children: _jsxs("div", Object.assign({ className: "kc-login-tooltip" }, { children: [_jsx("i", { className: getClassName("kcResetFlowIcon") }), _jsx("span", Object.assign({ className: "kc-tooltip-text" }, { children: msg("restartLoginTooltip") }))] })) }))] })) }))] }))] }))) : (_jsxs(_Fragment, { children: [showUsernameNode, _jsx("div", Object.assign({ className: getClassName("kcFormGroupClass") }, { children: _jsxs("div", Object.assign({ id: "kc-username" }, { children: [_jsx("label", Object.assign({ id: "kc-attempted-username" }, { children: auth === null || auth === void 0 ? void 0 : auth.attemptedUsername })), _jsx("a", Object.assign({ id: "reset-login", href: url.loginRestartFlowUrl }, { children: _jsxs("div", Object.assign({ className: "kc-login-tooltip" }, { children: [_jsx("i", { className: getClassName("kcResetFlowIcon") }), _jsx("span", Object.assign({ className: "kc-tooltip-text" }, { children: msg("restartLoginTooltip") }))] })) }))] })) }))] }))] })), _jsx("div", Object.assign({ id: "kc-content" }, { children: _jsxs("div", Object.assign({ id: "kc-content-wrapper" }, { children: [displayMessage && message !== undefined && (message.type !== "warning" || !isAppInitiatedAction) && (_jsxs("div", Object.assign({ className: clsx("alert", `alert-${message.type}`) }, { children: [message.type === "success" && _jsx("span", { className: getClassName("kcFeedbackSuccessIcon") }), message.type === "warning" && _jsx("span", { className: getClassName("kcFeedbackWarningIcon") }), message.type === "error" && _jsx("span", { className: getClassName("kcFeedbackErrorIcon") }), message.type === "info" && _jsx("span", { className: getClassName("kcFeedbackInfoIcon") }), _jsx("span", { className: "kc-feedback-text", dangerouslySetInnerHTML: {
                                                "__html": message.summary
                                            } })] }))), children, auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (_jsx("form", Object.assign({ id: "kc-select-try-another-way-form", action: url.loginAction, method: "post", className: clsx(displayWide && getClassName("kcContentWrapperClass")) }, { children: _jsx("div", Object.assign({ className: clsx(displayWide && [getClassName("kcFormSocialAccountContentClass"), getClassName("kcFormSocialAccountClass")]) }, { children: _jsxs("div", Object.assign({ className: getClassName("kcFormGroupClass") }, { children: [_jsx("input", { type: "hidden", name: "tryAnotherWay", value: "on" }), _jsx("a", Object.assign({ href: "#", id: "try-another-way", onClick: () => {
                                                        document.forms["kc-select-try-another-way-form"].submit();
                                                        return false;
                                                    } }, { children: msg("doTryAnotherWay") }))] })) })) }))), displayInfo && (_jsx("div", Object.assign({ id: "kc-info", className: getClassName("kcSignUpClass") }, { children: _jsx("div", Object.assign({ id: "kc-info-wrapper", className: getClassName("kcInfoAreaWrapperClass") }, { children: infoNode })) })))] })) }))] }))] })));
}
//# sourceMappingURL=Template.js.map