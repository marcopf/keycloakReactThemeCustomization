import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { clsx } from "../../tools/clsx";
import { useGetClassName } from "../../login/lib/useGetClassName";
export default function Register(props) {
    var _a, _b, _c, _d;
    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;
    const { getClassName } = useGetClassName({
        doUseDefaultCss,
        classes
    });
    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;
    const { msg, msgStr } = i18n;
    return (_jsx(Template, Object.assign({}, { kcContext, i18n, doUseDefaultCss, classes }, { headerNode: msg("registerTitle") }, { children: _jsxs("form", Object.assign({ id: "kc-register-form", className: getClassName("kcFormClass"), action: url.registrationAction, method: "post" }, { children: [_jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("firstName", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "firstName", className: getClassName("kcLabelClass") }, { children: msg("firstName") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "text", id: "firstName", className: getClassName("kcInputClass"), name: "firstName", defaultValue: (_a = register.formData.firstName) !== null && _a !== void 0 ? _a : "" }) }))] })), _jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("lastName", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "lastName", className: getClassName("kcLabelClass") }, { children: msg("lastName") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "text", id: "lastName", className: getClassName("kcInputClass"), name: "lastName", defaultValue: (_b = register.formData.lastName) !== null && _b !== void 0 ? _b : "" }) }))] })), _jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("email", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "email", className: getClassName("kcLabelClass") }, { children: msg("email") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "text", id: "email", className: getClassName("kcInputClass"), name: "email", defaultValue: (_c = register.formData.email) !== null && _c !== void 0 ? _c : "", autoComplete: "email" }) }))] })), !realm.registrationEmailAsUsername && (_jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("username", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "username", className: getClassName("kcLabelClass") }, { children: msg("username") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "text", id: "username", className: getClassName("kcInputClass"), name: "username", defaultValue: (_d = register.formData.username) !== null && _d !== void 0 ? _d : "", autoComplete: "username" }) }))] }))), passwordRequired && (_jsxs(_Fragment, { children: [_jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("password", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "password", className: getClassName("kcLabelClass") }, { children: msg("password") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "password", id: "password", className: getClassName("kcInputClass"), name: "password", autoComplete: "new-password" }) }))] })), _jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("password-confirm", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "password-confirm", className: getClassName("kcLabelClass") }, { children: msg("passwordConfirm") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "password", id: "password-confirm", className: getClassName("kcInputClass"), name: "password-confirm" }) }))] }))] })), recaptchaRequired && (_jsx("div", Object.assign({ className: "form-group" }, { children: _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("div", { className: "g-recaptcha", "data-size": "compact", "data-sitekey": recaptchaSiteKey }) })) }))), _jsxs("div", Object.assign({ className: getClassName("kcFormGroupClass") }, { children: [_jsx("div", Object.assign({ id: "kc-form-options", className: getClassName("kcFormOptionsClass") }, { children: _jsx("div", Object.assign({ className: getClassName("kcFormOptionsWrapperClass") }, { children: _jsx("span", { children: _jsx("a", Object.assign({ href: url.loginUrl }, { children: msg("backToLogin") })) }) })) })), _jsx("div", Object.assign({ id: "kc-form-buttons", className: getClassName("kcFormButtonsClass") }, { children: _jsx("input", { className: clsx(getClassName("kcButtonClass"), getClassName("kcButtonPrimaryClass"), getClassName("kcButtonBlockClass"), getClassName("kcButtonLargeClass")), type: "submit", value: msgStr("doRegister") }) }))] }))] })) })));
}
//# sourceMappingURL=Register.js.map