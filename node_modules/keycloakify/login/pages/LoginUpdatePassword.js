import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { clsx } from "../../tools/clsx";
import { useGetClassName } from "../../login/lib/useGetClassName";
export default function LoginUpdatePassword(props) {
    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;
    const { getClassName } = useGetClassName({
        doUseDefaultCss,
        classes
    });
    const { msg, msgStr } = i18n;
    const { url, messagesPerField, isAppInitiatedAction, username } = kcContext;
    return (_jsx(Template, Object.assign({}, { kcContext, i18n, doUseDefaultCss, classes }, { headerNode: msg("updatePasswordTitle") }, { children: _jsxs("form", Object.assign({ id: "kc-passwd-update-form", className: getClassName("kcFormClass"), action: url.loginAction, method: "post" }, { children: [_jsx("input", { type: "text", id: "username", name: "username", value: username, readOnly: true, autoComplete: "username", style: { display: "none" } }), _jsx("input", { type: "password", id: "password", name: "password", autoComplete: "current-password", style: { display: "none" } }), _jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("password", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "password-new", className: getClassName("kcLabelClass") }, { children: msg("passwordNew") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "password", id: "password-new", name: "password-new", autoFocus: true, autoComplete: "new-password", className: getClassName("kcInputClass") }) }))] })), _jsxs("div", Object.assign({ className: clsx(getClassName("kcFormGroupClass"), messagesPerField.printIfExists("password-confirm", getClassName("kcFormGroupErrorClass"))) }, { children: [_jsx("div", Object.assign({ className: getClassName("kcLabelWrapperClass") }, { children: _jsx("label", Object.assign({ htmlFor: "password-confirm", className: getClassName("kcLabelClass") }, { children: msg("passwordConfirm") })) })), _jsx("div", Object.assign({ className: getClassName("kcInputWrapperClass") }, { children: _jsx("input", { type: "password", id: "password-confirm", name: "password-confirm", autoComplete: "new-password", className: getClassName("kcInputClass") }) }))] })), _jsxs("div", Object.assign({ className: getClassName("kcFormGroupClass") }, { children: [_jsx("div", Object.assign({ id: "kc-form-options", className: getClassName("kcFormOptionsClass") }, { children: _jsx("div", Object.assign({ className: getClassName("kcFormOptionsWrapperClass") }, { children: isAppInitiatedAction && (_jsx("div", Object.assign({ className: "checkbox" }, { children: _jsxs("label", { children: [_jsx("input", { type: "checkbox", id: "logout-sessions", name: "logout-sessions", value: "on", checked: true }), msgStr("logoutOtherSessions")] }) }))) })) })), _jsx("div", Object.assign({ id: "kc-form-buttons", className: getClassName("kcFormButtonsClass") }, { children: isAppInitiatedAction ? (_jsxs(_Fragment, { children: [_jsx("input", { className: clsx(getClassName("kcButtonClass"), getClassName("kcButtonPrimaryClass"), getClassName("kcButtonLargeClass")), type: "submit", defaultValue: msgStr("doSubmit") }), _jsx("button", Object.assign({ className: clsx(getClassName("kcButtonClass"), getClassName("kcButtonDefaultClass"), getClassName("kcButtonLargeClass")), type: "submit", name: "cancel-aia", value: "true" }, { children: msg("doCancel") }))] })) : (_jsx("input", { className: clsx(getClassName("kcButtonClass"), getClassName("kcButtonPrimaryClass"), getClassName("kcButtonBlockClass"), getClassName("kcButtonLargeClass")), type: "submit", value: msgStr("doSubmit") })) }))] }))] })) })));
}
//# sourceMappingURL=LoginUpdatePassword.js.map