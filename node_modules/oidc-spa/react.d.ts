import { type ReactNode } from "react";
import { type ParamsOfCreateOidc, type Oidc, type OidcInitializationError } from "./oidc";
export type OidcReact<DecodedIdToken extends Record<string, unknown>> = OidcReact.NotLoggedIn | OidcReact.LoggedIn<DecodedIdToken>;
export declare namespace OidcReact {
    type Common = Oidc.Common;
    type NotLoggedIn = Common & {
        isUserLoggedIn: false;
        login: Oidc.NotLoggedIn["login"];
        oidcTokens?: never;
        logout?: never;
        initializationError: OidcInitializationError | undefined;
    };
    type LoggedIn<DecodedIdToken extends Record<string, unknown>> = Common & {
        isUserLoggedIn: true;
        oidcTokens: Oidc.Tokens<DecodedIdToken>;
        logout: Oidc.LoggedIn["logout"];
        renewTokens: Oidc.LoggedIn["renewTokens"];
        login?: never;
        initializationError?: never;
    };
}
/** @see: https://github.com/garronej/oidc-spa#option-2-usage-directly-within-react */
export declare function createReactOidc<DecodedIdToken extends Record<string, unknown> = Record<string, unknown>>(params: ParamsOfCreateOidc<DecodedIdToken>): {
    OidcProvider: (props: {
        fallback?: ReactNode;
        children: ReactNode;
    }) => import("react/jsx-runtime").JSX.Element;
    useOidc: {
        (params?: {
            assertUserLoggedIn: false;
        }): OidcReact<DecodedIdToken>;
        (params: {
            assertUserLoggedIn: true;
        }): OidcReact.LoggedIn<DecodedIdToken>;
    };
    prOidc: Promise<Oidc<DecodedIdToken>>;
};
