export declare type Oidc<DecodedIdToken extends Record<string, unknown> = Record<string, unknown>> = Oidc.LoggedIn<DecodedIdToken> | Oidc.NotLoggedIn;
export declare namespace Oidc {
    type Common = {
        params: {
            issuerUri: string;
            clientId: string;
        };
    };
    type NotLoggedIn = Common & {
        isUserLoggedIn: false;
        login: (params: {
            doesCurrentHrefRequiresAuth: boolean;
            extraQueryParams?: Record<string, string>;
        }) => Promise<never>;
        initializationError: OidcInitializationError | undefined;
    };
    type LoggedIn<DecodedIdToken extends Record<string, unknown> = Record<string, unknown>> = Common & {
        isUserLoggedIn: true;
        renewTokens(): Promise<void>;
        getTokens: () => Tokens<DecodedIdToken>;
        subscribeToTokensChange: (onTokenChange: () => void) => {
            unsubscribe: () => void;
        };
        logout: (params: {
            redirectTo: "home" | "current page";
        } | {
            redirectTo: "specific url";
            url: string;
        }) => Promise<never>;
    };
    type Tokens<DecodedIdToken extends Record<string, unknown> = Record<string, unknown>> = Readonly<{
        accessToken: string;
        accessTokenExpirationTime: number;
        idToken: string;
        refreshToken: string;
        refreshTokenExpirationTime: number;
        decodedIdToken: DecodedIdToken;
    }>;
}
export declare class OidcInitializationError extends Error {
    readonly type: "server down" | "bad configuration" | "unknown";
    constructor(params: {
        type: "server down";
    } | {
        type: "bad configuration";
        timeoutDelayMs: number;
    } | {
        type: "unknown";
        cause: Error;
    });
}
export type ParamsOfCreateOidc<DecodedIdToken extends Record<string, unknown> = Record<string, unknown>> = {
    issuerUri: string;
    clientId: string;
    clientSecret?: string;
    transformUrlBeforeRedirect?: (url: string) => string;
    /**
     * Extra query params to be added on the login url.
     * You can provide a function that returns those extra query params, it will be called
     * when login() is called.
     *
     * Example: extraQueryParams: ()=> ({ ui_locales: "fr" })
     */
    extraQueryParams?: Record<string, string> | (() => Record<string, string>);
    /**
     * This parameter have to be provided if your App is not hosted at the origin of the subdomain.
     * For example if your site is hosted by navigating to `https://www.example.com`
     * you don't have to provide this parameter.
     * On the other end if your site is hosted by navigating to `https://www.example.com/my-app`
     * Then you want to set publicUrl to `/my-app`.
     * If you are using Vite: `publicUrl: import.meta.env.BASE_URL`
     * If you using Create React App: `publicUrl: process.env.PUBLIC_URL`
     *
     * Be mindful that `${window.location.origin}${publicUrl}/silent-sso.html` must return the `silent-sso.html` that
     * you are supposed to have created in your `public/` directory.
     */
    publicUrl?: string;
    decodedIdTokenSchema?: {
        parse: (data: unknown) => DecodedIdToken;
    };
};
/** @see: https://github.com/garronej/oidc-spa#option-1-usage-without-involving-the-ui-framework */
export declare function createOidc<DecodedIdToken extends Record<string, unknown> = Record<string, unknown>>(params: ParamsOfCreateOidc<DecodedIdToken>): Promise<Oidc<DecodedIdToken>>;
