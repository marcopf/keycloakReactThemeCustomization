{"version":3,"file":"Password-BmC2OBcG.js","sources":["../../src/keycloak-theme/account/pages/OtpSection.tsx","../../src/keycloak-theme/account/pages/Password.tsx"],"sourcesContent":["import { AuthContext, AuthProvider, IAuthContext, TAuthConfig, TRefreshTokenExpiredEvent } from \"react-oauth2-code-pkce\"\nimport { useContext, useEffect, useState } from 'react'\n\n// Aggiunge lo zero iniziale se il numero e' minore di 10\nfunction addZero(num: number) {\n    return (num < 10 ? '0' : '') + num;\n}\n\nfunction getFormattedDate(milliseconds: number){\n    // Crea una data a partire dai millisecondi dal 1970\n    var date = new Date(milliseconds);\n\n    // estraggo ogni valore dalla data appena creata\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var seconds = date.getSeconds();\n    \n    // Formatto la data per una  migliore visualizzazione\n    return (year + \"-\" + addZero(month) + \"-\" + addZero(day) + \" \" + addZero(hours) + \":\" + addZero(minutes) + \":\" + addZero(seconds));\n}\n\nfunction UserInfo(props: any): JSX.Element {\n    const {token} = useContext<IAuthContext>(AuthContext);\n    const [totpList, setList] = useState<any[]>([]);\n    let message = props.msg\n\n    //funzione asincrona che ottiene le informazioni relative alle configurazioni otp attive\n    //  token: rappresenta l'access_token che verra' poi utilizzato nell'authorization header della richiesta\n    async function getInfo(token: string) {\n\n        // effettuo la richesta tramite fetch prestando attenzione all'asincronicita'\n        const res = await fetch(props.props.kcContext.properties.OTP_INFO_ENDPOINT, {\n            method: \"GET\",\n            credentials: \"include\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": \"Bearer \" + token\n            }\n        })\n    \n        //parso la risposta come json\n        let resJson = {};\n        try {\n            if (res.ok)\n                resJson = await res.json();\n        } catch (e) {\n            console.log(e)\n        }\n\n        //altrimenti torno un'oggetto vuoto \"{}\"\n        return resJson;\n    }\n\n    async function deleteTotp(e: any){\n        let target = e.target;\n\n        if (target.tagName == 'SPAN')\n            target = target.parentNode;\n        if (!confirm(\"vuoi eleminare?\"))\n            return;\n        const res = await fetch(props.props.kcContext.properties.OTP_INFO_ENDPOINT + target.getAttribute('id'), {\n            method: 'DELETE',\n            headers: {\n                \"Authorization\": \"Bearer \" + token,\n                'Content-Type': 'application/json'\n            }\n        })\n        if (res.ok){\n            window.location.reload();\n        }\n        else\n            alert('Errore!');\n    }\n    \n    //permette di gestire in modo asincrono la creazione del form dinamico che e' basato sulla variabile USERDATA\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response: any = await getInfo(token);\n                const userCredentialMetadata = response[1].userCredentialMetadatas;\n                if (userCredentialMetadata && response[1]) {\n                    setList(userCredentialMetadata);\n                }\n            } catch (error) {\n                console.error('Error fetching user info:', error);\n            }\n        };\n\n        fetchData();\n    }, [token]);\n\n    return <>\n\n        {/* Definisco l'header della sezione OTP */}\n        <div className=\"row my-5\">\n            <div className=\"col-8\">\n                <h1>{message('configureAuthenticators')}</h1>\n            </div>\n            <div className=\"col-4 d-flex justify-content-end align-items-center\">\n\n                {/* Preparo il link che portera' alla pagina di per aggiungere una nuova configurazione OTP */}\n                <a href={props.props.kcContext.properties.NEW_OTP_CONFIGURATION}>{message('authenticatorSubTitle')}</a>\n            </div>\n        </div>\n\n        {/* Controllo la lungezza dell'array contentente le informazioni relative\n        alle configurazioni OTP se e' 0 mostro un messaggio di avviso */}\n        {totpList.length == 0 ?\n            <div className=\"row justify-content-center\">\n                <div className=\"col-6 d-flex justify-content-center\">\n                    <span className=\"text-danger\">{message('notHaveAnyResource')}</span>\n                </div>\n            </div> : <></>}\n\n        {/* Ciclo l'array contentente tutte le configurazioni attive \"totpList\"\n        per creare in maniera dinamica le righe che permettono la gestione della configurazione */}\n        {totpList.map(el=>{\n            return <>\n\n                <div className=\"mt-4 p-3 row align-items-center\">\n                    <div className=\"col-4 d-flex flex-column\"><strong className=\"me-3\">{message('totpDeviceName')}: </strong>{el.credential.userLabel}</div>\n                    <div className=\"col-4 d-flex flex-column\"><strong className=\"me-3\">{message('date')}: </strong>{getFormattedDate(el.credential.createdDate)}</div>\n\n                    {/* Creo un pulsante atto alla rimozione della configurazione impostando l'id del bottonattributie uguale\n                    all'id della configurazione, cosi che possa poi fare riferimento a quest'ultimo per poter poi eliminare la configurazione OTP */}\n                    <div className=\"col-4 d-flex justify-content-end\"><button id={el.credential.id} className=\"btn btn-danger\" onClick={deleteTotp}>{message('doRemove')}</button></div>\n                </div>\n            </>\n        })}\n\n    </>\n  }\n\n  interface WellKnow {\n    [key: string]: string\n  }\n\n  //definisco l'oggetto finale che si espandera' poi in una lista di configurazioni OTP dinamica, dipendenti dalle informazioni ottenute dal server di autenticazione\n  export default function OtpSection(props: any): JSX.Element{\n\n    const [wellKnown, setWellKnown] = useState({} as WellKnow);\n    const [contentLoaded, setContentLoaded] = useState(false);\n\n    //ricava i dati dall'endpoint WELL KNOWN di keycloak\n    useEffect(()=>{\n        const fetchData = async () => {\n            const res = await fetch(props.props.kcContext.properties.WELL_KNOWN_API);\n\n            if (res.ok){\n                let resJson = await res.json();\n                setWellKnown(resJson as WellKnow);\n                setContentLoaded(true);\n            }\n        }\n\n        fetchData();\n    }, []);\n\n    //aspetta che gli endpoint siano stati ricavati, una volta ottenuti vie effetuata la chimata OAUTH2\n    if (contentLoaded){\n\n        const authConfig: TAuthConfig = {\n            clientId: 'account-console',\n            authorizationEndpoint: wellKnown.authorization_endpoint,\n            tokenEndpoint: wellKnown.token_endpoint,\n            redirectUri: wellKnown.issuer + '/account',\n            scope: 'openid',\n            onRefreshTokenExpire: (event: TRefreshTokenExpiredEvent) => window.confirm('Session expired. Refresh page to continue using the site?') && event.login(),\n        }\n\n        return <>\n            <AuthProvider authConfig={authConfig}>\n                <UserInfo msg={props.msg} props={props.props}></UserInfo>\n            </AuthProvider>\n        </>\n    }\n\n    //se i dati richiesti tramite fetch non sono ancora disponibili o sono presenti errori ritorno un'oggetto vuoto\n    return (\n        <></>\n    )\n  }","import type { PageProps } from \"keycloakify/account/pages/PageProps\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport OtpSection from './OtpSection'\nimport sprites from './../assets/sprites.svg'\n\nexport default function LogoutConfirm(props: PageProps<Extract<KcContext, { pageId: \"password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n\n    const { url, password, account, stateChecker } = kcContext;\n\n    const { msg } = i18n;\n    \n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} active=\"password\">            \n            <div className=\"row d-flex align-items-center\">\n                <div className=\"col-md-8\">\n                    <h2>{msg(\"changePasswordHtmlTitle\")}</h2>\n                </div>\n                <div className=\"col-md-4 subtitle\">\n                    <span className=\"subtitle\">*{msg(\"requiredFields\")}</span>\n                </div>\n            </div>\n            <form action={url.passwordUrl} className=\"form-horizontal mt-3\" method=\"post\">\n                <input\n                    type=\"text\"\n                    id=\"username\"\n                    name=\"username\"\n                    value={account.username ?? \"\"}\n                    autoComplete=\"username\"\n                    readOnly\n                    style={{ \"display\": \"none\" }}\n                />\n                {password.passwordSet && (\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">{msg(\"password\")}</label>\n                        <input type=\"password\" data-bs-input className=\"form-control input-password\" id=\"password\" name=\"password\" aria-labelledby=\"infoPassword\"/>\n                        <span className=\"password-icon\" aria-hidden=\"true\">\n                          <svg className=\"password-icon-visible icon icon-sm\"><use href={sprites + '#it-password-visible'}></use></svg>\n                          <svg className=\"password-icon-invisible icon icon-sm d-none\"><use href={sprites + \"#it-password-invisible\"}></use></svg>\n                        </span>\n                    </div>\n                )}\n                <input type=\"hidden\" id=\"stateChecker\" name=\"stateChecker\" value={stateChecker} />\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"password-new\">{msg(\"passwordNew\")}</label>\n                    <input type=\"password\" data-bs-input className=\"form-control input-password\" id=\"password-new\" name=\"password-new\" aria-labelledby=\"infoPassword\"/>\n                    <span className=\"password-icon\" aria-hidden=\"true\">\n                      <svg className=\"password-icon-visible icon icon-sm\"><use href={sprites + '#it-password-visible'}></use></svg>\n                      <svg className=\"password-icon-invisible icon icon-sm d-none\"><use href={sprites + \"#it-password-invisible\"}></use></svg>\n                    </span>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password-confirm\">{msg(\"passwordConfirm\")}</label>\n                    <input type=\"password\" data-bs-input className=\"form-control input-password\" id=\"password-confirm\" name=\"password-confirm\" aria-labelledby=\"infoPassword\"/>\n                    <span className=\"password-icon\" aria-hidden=\"true\">\n                      <svg className=\"password-icon-visible icon icon-sm\"><use href={sprites + '#it-password-visible'}></use></svg>\n                      <svg className=\"password-icon-invisible icon icon-sm d-none\"><use href={sprites + \"#it-password-invisible\"}></use></svg>\n                    </span>\n                </div>\n                <div className=\"form-group\">\n                    <div id=\"kc-form-buttons\" className=\"submit\">\n                        <div className=\"d-flex justify-content-end\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                name=\"submitAction\"\n                                value=\"Save\"\n                            >\n                                {msg(\"doSave\")}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <OtpSection msg={msg} props={props}></OtpSection>\n        </Template>\n    );\n}\n"],"names":["addZero","num","getFormattedDate","milliseconds","date","year","month","day","hours","minutes","seconds","UserInfo","props","token","useContext","AuthContext","totpList","setList","useState","message","getInfo","res","resJson","e","deleteTotp","target","useEffect","response","userCredentialMetadata","error","jsxs","Fragment","jsx","el","OtpSection","wellKnown","setWellKnown","contentLoaded","setContentLoaded","authConfig","event","AuthProvider","LogoutConfirm","kcContext","i18n","doUseDefaultCss","Template","classes","url","password","account","stateChecker","msg","sprites"],"mappings":"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"}